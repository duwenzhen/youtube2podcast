# pip install google-generativeai mcp
import asyncio
import os
# Add json import for formatting output
import json
import time
from datetime import datetime
from google import genai
from google.genai import types
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client
from dotenv import load_dotenv
import markdown

# Load environment variables from .env file
load_dotenv()

api_key = os.environ["GEMINI_API_KEY"]
client = genai.Client(api_key=api_key)

# print(os.getcwd())
# Re-add StdioServerParameters, setting args for stdio
server_params = StdioServerParameters(
    command=".venv/bin/python",
    args=["src/gemini_mcpserver.py",
          "--connection_type", "stdio"],
    cwd=".",
    env={"GMAIL_API_KEY": api_key},
)



async def run(prompt_content):
    time.sleep(60)
    # Remove debug prints
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:

            # prompt = f"send this instruction to gemini flash model : please tell me what day is it today ?"
            await session.initialize()
            # Remove debug prints

            mcp_tools = await session.list_tools()
            # Remove debug prints
            tools = [
                types.Tool(
                    function_declarations=[
                        {
                            "name": tool.name,
                            "description": tool.description,
                            "parameters": {
                                k: v
                                for k, v in tool.inputSchema.items()
                                if k not in ["additionalProperties", "$schema"]
                            },
                        }
                    ]
                )
                for tool in mcp_tools.tools
            ]
            # Remove debug prints

            response = client.models.generate_content(
                model="gemini-2.5-flash",
                contents=prompt_content,
                config=types.GenerateContentConfig(
                    temperature=0,
                    tools=tools,
                ),
            )

            time.sleep(60)
            # Remove raw response print
            if response.candidates[0].content.parts[0].function_call:
                function_call = response.candidates[0].content.parts[0].function_call

                result = await session.call_tool(
                    function_call.name, arguments=dict(function_call.args)
                )
                return result


                # Parse and print formatted JSON result

            else:
                print("No function call was generated by the model.")
                if response.text:
                     print("Model response:")
                     print(response.text)


